// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using JsonParser;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace FileParser
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("AssessmentMeasurements")]
        public List<AssessmentMeasurement> AssessmentMeasurements { get; set; }

        [JsonProperty("InspectionName")]
        public object InspectionName { get; set; }

        [JsonProperty("MetaData")]
        public MetaData MetaData { get; set; }

        [JsonProperty("ResultDataType")]
        public string ResultDataType { get; set; }
    }

    public partial class AssessmentMeasurement
    {
        [JsonProperty("SensorType")]
        public SensorType SensorType { get; set; }

        [JsonProperty("Cable")]
        public Cable Cable { get; set; }

        [JsonProperty("CableSerialNumber")]
        public CableSerialNumber CableSerialNumber { get; set; }

        [JsonProperty("CableLengthInMm")]
        public long CableLengthInMm { get; set; }

        [JsonProperty("CalibrationDevice")]
        public CalibrationDevice CalibrationDevice { get; set; }

        [JsonProperty("EndDate")]
        public DateTimeOffset EndDate { get; set; }

        [JsonProperty("Temperature")]
        public long Temperature { get; set; }

        [JsonProperty("SensorMeasurements")]
        public List<SensorMeasurement> SensorMeasurements { get; set; }

        [JsonProperty("IliToolId")]
        public IliToolId IliToolId { get; set; }
    }

    public partial class Cable
    {
        [JsonProperty("FrontendLogicalId")]
        public long FrontendLogicalId { get; set; }

        [JsonProperty("Sensors")]
        public List<Dictionary<string, long?>> Sensors { get; set; }
    }

    public partial class CableSerialNumber
    {
        [JsonProperty("PartNumber")]
        public long PartNumber { get; set; }

        [JsonProperty("CableLengthInMillimeters")]
        public long CableLengthInMillimeters { get; set; }

        [JsonProperty("YearWeekAndCounter")]
        public long YearWeekAndCounter { get; set; }

        [JsonProperty("IsEmpty")]
        public bool IsEmpty { get; set; }
    }

    public partial class CalibrationDevice
    {
        [JsonProperty("SensorType")]
        public long SensorType { get; set; }

        [JsonProperty("Partnumber")]
        public long Partnumber { get; set; }
    }

    public partial class SensorMeasurement
    {
        [JsonProperty("Sensor")]
        public Dictionary<string, long?> Sensor { get; set; }

        [JsonProperty("InspectionConfigurationIndex")]
        public long InspectionConfigurationIndex { get; set; }

        [JsonProperty("CalibrationStatus")]
        public long CalibrationStatus { get; set; }

        [JsonProperty("CalibrationVector")]
        public CalibrationVector CalibrationVector { get; set; }

        [JsonProperty("CalibrationAmplitude")]
        public long CalibrationAmplitude { get; set; }

        [JsonProperty("CalibrationShot")]
        public CalibrationShot CalibrationShot { get; set; }

        [JsonProperty("CoverageState")]
        public bool CoverageState { get; set; }

        [JsonProperty("SerialNumber")]
        public string SerialNumber { get; set; }

        [JsonProperty("ExpectationRanges")]
        public List<ExpectationRange> ExpectationRanges { get; set; }

        [JsonProperty("SensorDefect")]
        public SensorDefect SensorDefect { get; set; }
    }

    public partial class CalibrationShot
    {
        [JsonProperty("Timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("Sensor")]
        public Dictionary<string, long?> Sensor { get; set; }

        [JsonProperty("ShotData")]
        public ShotData ShotData { get; set; }

        [JsonProperty("Angle")]
        public long Angle { get; set; }
    }

    public partial class ShotData
    {
        [JsonProperty("Selections")]
        public string Selections { get; set; }

        [JsonProperty("TimeOfFlights")]
        public string TimeOfFlights { get; set; }

        [JsonProperty("SystemFrequency")]
        public long SystemFrequency { get; set; }

        [JsonProperty("Amplitudes")]
        public string Amplitudes { get; set; }

        [JsonProperty("ShotDataType")]
        public ShotDataType ShotDataType { get; set; }
    }

    public partial class CalibrationVector
    {
        [JsonProperty("TimeOfFlight")]
        public long TimeOfFlight { get; set; }

        [JsonProperty("AmplitudeValue")]
        public long AmplitudeValue { get; set; }

        [JsonProperty("IsAmplitudeNegative")]
        public bool IsAmplitudeNegative { get; set; }

        [JsonProperty("Threshold")]
        public long Threshold { get; set; }

        [JsonProperty("IsSelected")]
        public bool IsSelected { get; set; }
    }

    public partial class ExpectationRange
    {
        [JsonProperty("TimeOfFlightInNanoseconds")]
        public long TimeOfFlightInNanoseconds { get; set; }

        [JsonProperty("ThresholdInDecibel")]
        public long ThresholdInDecibel { get; set; }
    }

    public partial class SensorDefect
    {
        [JsonProperty("Description")]
        public string Description { get; set; }
    }

    public partial class SensorType
    {
        [JsonProperty("Name")]
        public Name Name { get; set; }

        [JsonProperty("MinAmplitude")]
        public long MinAmplitude { get; set; }

        [JsonProperty("MaxAmplitude")]
        public long MaxAmplitude { get; set; }

        [JsonProperty("Info")]
        public Info Info { get; set; }

        [JsonProperty("SensorType")]
        public long SensorTypeSensorType { get; set; }

        [JsonProperty("SerialNumberRegex")]
        public SerialNumberRegex SerialNumberRegex { get; set; }

        [JsonProperty("SerialNumberRegexInfo")]
        public SerialNumberRegexInfo SerialNumberRegexInfo { get; set; }

        [JsonProperty("ExpectationRangesRelative")]
        public List<ExpectationRange> ExpectationRangesRelative { get; set; }
    }

    public partial class MetaData
    {
        [JsonProperty("UserName")]
        public string UserName { get; set; }

        [JsonProperty("Start")]
        public DateTimeOffset Start { get; set; }

        [JsonProperty("End")]
        public object End { get; set; }

        [JsonProperty("ApplicationVersion")]
        public ApplicationVersion ApplicationVersion { get; set; }
    }

    public partial class ApplicationVersion
    {
        [JsonProperty("Major")]
        public long Major { get; set; }

        [JsonProperty("Minor")]
        public long Minor { get; set; }

        [JsonProperty("Build")]
        public long Build { get; set; }

        [JsonProperty("Revision")]
        public long Revision { get; set; }

        [JsonProperty("MajorRevision")]
        public long MajorRevision { get; set; }

        [JsonProperty("MinorRevision")]
        public long MinorRevision { get; set; }
    }

    public enum IliToolId { The20ISensorTestSystem001 };

    public enum ShotDataType { NdtCassiopeiaCommonMeasurementModelsShotDataAlok };

    public enum Info { CurrentlyWithoutFurtherSpec };

    public enum Name { N5840, P40 };

    public enum SerialNumberRegex { D6, Empty };

    public enum SerialNumberRegexInfo { ValidSerialNumberExample000123, ValidSerialNumberExample654239 };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, FileParser.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, FileParser.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                IliToolIdConverter.Singleton,
                ShotDataTypeConverter.Singleton,
                InfoConverter.Singleton,
                NameConverter.Singleton,
                SerialNumberRegexConverter.Singleton,
                SerialNumberRegexInfoConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class IliToolIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IliToolId) || t == typeof(IliToolId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "20i-SensorTestSystem-001")
            {
                return IliToolId.The20ISensorTestSystem001;
            }
            throw new Exception("Cannot unmarshal type IliToolId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IliToolId)untypedValue;
            if (value == IliToolId.The20ISensorTestSystem001)
            {
                serializer.Serialize(writer, "20i-SensorTestSystem-001");
                return;
            }
            throw new Exception("Cannot marshal type IliToolId");
        }

        public static readonly IliToolIdConverter Singleton = new IliToolIdConverter();
    }

    internal class ShotDataTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ShotDataType) || t == typeof(ShotDataType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Ndt.Cassiopeia.Common.Measurement.Models.ShotDataAlok")
            {
                return ShotDataType.NdtCassiopeiaCommonMeasurementModelsShotDataAlok;
            }
            throw new Exception("Cannot unmarshal type ShotDataType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ShotDataType)untypedValue;
            if (value == ShotDataType.NdtCassiopeiaCommonMeasurementModelsShotDataAlok)
            {
                serializer.Serialize(writer, "Ndt.Cassiopeia.Common.Measurement.Models.ShotDataAlok");
                return;
            }
            throw new Exception("Cannot marshal type ShotDataType");
        }

        public static readonly ShotDataTypeConverter Singleton = new ShotDataTypeConverter();
    }

    internal class InfoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Info) || t == typeof(Info?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "currently without further spec. ")
            {
                return Info.CurrentlyWithoutFurtherSpec;
            }
            throw new Exception("Cannot unmarshal type Info");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Info)untypedValue;
            if (value == Info.CurrentlyWithoutFurtherSpec)
            {
                serializer.Serialize(writer, "currently without further spec. ");
                return;
            }
            throw new Exception("Cannot marshal type Info");
        }

        public static readonly InfoConverter Singleton = new InfoConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "N5840":
                    return Name.N5840;
                case "P40":
                    return Name.P40;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.N5840:
                    serializer.Serialize(writer, "N5840");
                    return;
                case Name.P40:
                    serializer.Serialize(writer, "P40");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class SerialNumberRegexConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SerialNumberRegex) || t == typeof(SerialNumberRegex?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case ".*":
                    return SerialNumberRegex.Empty;
                case "^\\d{6}$":
                    return SerialNumberRegex.D6;
            }
            throw new Exception("Cannot unmarshal type SerialNumberRegex");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SerialNumberRegex)untypedValue;
            switch (value)
            {
                case SerialNumberRegex.Empty:
                    serializer.Serialize(writer, ".*");
                    return;
                case SerialNumberRegex.D6:
                    serializer.Serialize(writer, "^\\d{6}$");
                    return;
            }
            throw new Exception("Cannot marshal type SerialNumberRegex");
        }

        public static readonly SerialNumberRegexConverter Singleton = new SerialNumberRegexConverter();
    }

    internal class SerialNumberRegexInfoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SerialNumberRegexInfo) || t == typeof(SerialNumberRegexInfo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Valid serial number example: 000123":
                    return SerialNumberRegexInfo.ValidSerialNumberExample000123;
                case "Valid serial number example: 654239":
                    return SerialNumberRegexInfo.ValidSerialNumberExample654239;
            }
            throw new Exception("Cannot unmarshal type SerialNumberRegexInfo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SerialNumberRegexInfo)untypedValue;
            switch (value)
            {
                case SerialNumberRegexInfo.ValidSerialNumberExample000123:
                    serializer.Serialize(writer, "Valid serial number example: 000123");
                    return;
                case SerialNumberRegexInfo.ValidSerialNumberExample654239:
                    serializer.Serialize(writer, "Valid serial number example: 654239");
                    return;
            }
            throw new Exception("Cannot marshal type SerialNumberRegexInfo");
        }

        public static readonly SerialNumberRegexInfoConverter Singleton = new SerialNumberRegexInfoConverter();
    }
}
